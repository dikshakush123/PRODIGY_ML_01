# -*- coding: utf-8 -*-
"""PRODIGY_ML_01

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15spIEIAdigrbGerLYMM8dGHQzZcyY1jY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import Ridge

df=pd.read_csv('/content/Housing.csv')
df

df.isnull().sum()

#duplicate values
duplicates= df.duplicated().sum()
duplicates
#no duplicates row

df.columns

px.scatter(df,x = 'area', y='bedrooms')

#categorical to integers
from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df['area']=le.fit_transform(df['area'])
df['bedrooms']=le.fit_transform(df['bedrooms'])
df['bathrooms']=le.fit_transform(df['bathrooms'])
df['mainroad']=le.fit_transform(df['mainroad'])
df['basement']=le.fit_transform(df['basement'])
df['parking']=le.fit_transform(df['parking'])

x = df[['area','bedrooms','bathrooms','mainroad','basement','parking']]
y = df[['price']]
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

features = df[['area','bedrooms','bathrooms','mainroad','basement','parking']]
target = df[['price']]

# Create a new DataFrame with only the selected columns
data_new= pd.concat([features, target], axis=1)
corr_matrix = data_new.corr()

corr_matrix

plt.figure(figsize=(8, 8))
sns.heatmap(corr_matrix, annot=True, cmap='viridis', fmt=".2f")
plt.title("Correlation Heatmap: Features vs. Target")
plt.show()

#heatmaps
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix[['price']], cmap='viridis')
plt.title("Feature Correlation with SalePrice")
plt.show()

#create a linear regression model
model = LinearRegression()
# Fit the model to the training data
model.fit(x_train, y_train)

# Make predictions on the test data
y_pred = model.predict(x_test)

model.score(x_train,y_train)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

model.predict([[7420,4,2,0,1,0]])

plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs. Predicted Prices")
plt.show()